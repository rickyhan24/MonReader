# -*- coding: utf-8 -*-
"""MonReaderCNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U4UmcNmVuwlxMICKN4YvpMRPVplQb4Yu

# Single Image Prediction using CNN

## Set up data
"""

#mount google drive in colab
from google.colab import drive
drive.mount('/content/drive')

#update file paths
train_data_dir = '/content/drive/My Drive/images/images/training'
test_data_dir = '/content/drive/My Drive/images/images/testing'
test_set_data_dir = '/content/drive/My Drive/images/images/test_set'

#set up ImageDataGenerators
from tensorflow.keras.preprocessing.image import ImageDataGenerator
# Set up data generators
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest')

test_datagen = ImageDataGenerator(rescale=1./255)

# Load images from directory
train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(150, 150),  # change this to the desired image size
    batch_size=32,
    class_mode='binary',
    shuffle=True)  # use 'categorical' if more than two classes

validation_generator = test_datagen.flow_from_directory(
    test_data_dir,
    target_size=(150, 150),  # change this to the desired image size
    batch_size=32,
    class_mode='binary',
    shuffle=True)  # use 'categorical' if more than two classes

test_generator = test_datagen.flow_from_directory(
    test_set_data_dir,  # replace with your test data path
    target_size=(150, 150),  # or the input size of your model
    batch_size=1,  # or a batch size that divides your total number of test samples
    class_mode='binary',  # or 'categorical' for multi-class
    shuffle=False)

"""## Build and Train CNN Model"""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.callbacks import EarlyStopping
# Model configuration
img_width, img_height, img_num_channels = 150, 150, 3
input_shape = (img_width, img_height, img_num_channels)
num_classes = 1  # binary classification

# Define the model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=input_shape),
    MaxPooling2D(2, 2),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Flatten(),
    Dense(512, activation='relu'),
    Dense(num_classes, activation='sigmoid')
])
# Early stopping
early_stopping = EarlyStopping(monitor='val_loss', patience=10,restore_best_weights=True)
# Compile the model
model.compile(loss='binary_crossentropy',  # use 'categorical_crossentropy' for multi-class
              optimizer='adam',
              metrics=['accuracy'])

# Train the model
history = model.fit(
    train_generator,
    steps_per_epoch=2402 // 32,  # depends on your data
    epochs=75,
    callbacks=[early_stopping],
    validation_data=validation_generator,
    validation_steps=299 // 32 ,  # depends on your data
    verbose=2)

import matplotlib.pyplot as plt

# Assuming 'history' is the result returned by the fit function
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(len(acc))

plt.plot(epochs, acc, 'r', label='Training accuracy')
plt.plot(epochs, val_acc, 'b', label='Validation accuracy')
plt.title('Training and validation accuracy')
plt.legend()

plt.figure()

plt.plot(epochs, loss, 'r', label='Training Loss')
plt.plot(epochs, val_loss, 'b', label='Validation Loss')
plt.title('Training and validation loss')
plt.legend()

plt.show()

"""## Evaluate model"""

import numpy as np
#Evaluate model on test set
test_loss, test_accuracy = model.evaluate(test_generator)
print(f"Test Accuracy: {test_accuracy}")
#calculate f1 score
from sklearn.metrics import precision_score, recall_score, f1_score

# Predictions
test_predictions = model.predict(test_generator)
test_predictions_binary = (test_predictions > 0.5).astype(np.int64)

# True labels
true_labels = test_generator.classes

# Calculate precision, recall, and F1 score
precision = precision_score(true_labels, test_predictions_binary)
recall = recall_score(true_labels, test_predictions_binary)
f1 = f1_score(true_labels, test_predictions_binary)

print(f"Precision: {precision}")
print(f"Recall: {recall}")
print(f"F1 Score: {f1}")

model.save('/content/cnn.h5')





